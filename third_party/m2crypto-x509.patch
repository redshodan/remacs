--- SWIG/_x509.i.old	2011-10-31 08:17:06.828921001 -0600
+++ SWIG/_x509.i	2011-10-31 08:46:58.728921002 -0600
@@ -11,6 +11,7 @@
 
 %{
 #include <openssl/x509.h>
+#include <openssl/x509_vfy.h>
 #include <openssl/x509v3.h>
 %}
 
@@ -604,6 +605,108 @@
   return X509_STORE_CTX_get_app_data(ctx);
 }
 
+/*
+ * FIXME: Figure out the SWIG magic for allowing NULL/None pointers. For now
+ * just add a bool to indicate use.
+ */
+#define VERIFY_BUFF_SIZE 5120
+PyObject *verify_cert(STACK_OF(X509) *tstack, X509 *x, X509_CRL *crl,
+                      int use_crl)
+{
+    PyObject *ret = NULL;
+    X509_STORE *cert_ctx = NULL;
+    X509_STORE_CTX *csc = NULL;
+    X509_VERIFY_PARAM *vpm = NULL;
+    int cert_error = 0;
+    int flags = 0;
+    char errbuff[VERIFY_BUFF_SIZE];
+    errbuff[0] = 0;
+
+    vpm = X509_VERIFY_PARAM_new();
+    if (vpm == NULL)
+    {
+        const char *errbuff = "X509_VERIFY_PARAM_new failed to allocate";
+        PyErr_SetObject(_x509_err, Py_BuildValue("si", errbuff, -1));
+        return NULL;
+    }
+    flags = X509_V_FLAG_POLICY_CHECK | X509_V_FLAG_X509_STRICT;
+    if (use_crl)
+    {
+        flags |= X509_V_FLAG_CRL_CHECK | X509_V_FLAG_CRL_CHECK_ALL;
+    }
+    X509_VERIFY_PARAM_set_flags(vpm, flags);
+    X509_VERIFY_PARAM_set_depth(vpm, 10);
+    cert_ctx=X509_STORE_new();
+    if (cert_ctx == NULL)
+    {
+        X509_VERIFY_PARAM_free(vpm);
+        const char *errbuff = "X509_STORE_NEW failed to allocate";
+        PyErr_SetObject(_x509_err, Py_BuildValue("si", errbuff, -1));
+        return NULL;
+    }
+    X509_STORE_set1_param(cert_ctx, vpm);
+    csc = X509_STORE_CTX_new();
+    if (csc == NULL)
+    {
+        X509_VERIFY_PARAM_free(vpm);
+        X509_STORE_free(cert_ctx);
+        const char* errbuff = "X509_STORE_CTX_new failed to allocate";
+        PyErr_SetObject(_x509_err, Py_BuildValue("si", errbuff, -1));
+        return NULL;
+    }
+    X509_STORE_set_flags(cert_ctx, 0);
+    if (!X509_STORE_CTX_init(csc, cert_ctx, x, NULL))
+    {
+        X509_VERIFY_PARAM_free(vpm);
+        X509_STORE_free(cert_ctx);
+        X509_STORE_CTX_free(csc);
+        const char *errbuff = "X509_STORE_CTX_init failed";
+        PyErr_SetObject(_x509_err, Py_BuildValue("si", errbuff, -1));
+        return NULL;
+    }
+    if (tstack)
+    {
+        X509_STORE_CTX_trusted_stack(csc, tstack);
+    }
+    if (use_crl)
+    {
+        STACK_OF(X509_CRL) *crls = sk_X509_CRL_new_null();
+        if (crls == NULL)
+        {
+            X509_VERIFY_PARAM_free(vpm);
+            X509_STORE_free(cert_ctx);
+            X509_STORE_CTX_free(csc);
+            const char *errbuff = "X509_STORE_CTX_init failed";
+            PyErr_SetObject(_x509_err, Py_BuildValue("si", errbuff, -1));
+            return NULL;
+        }
+        sk_X509_CRL_push(crls, crl);
+        X509_STORE_CTX_set0_crls(csc, crls);
+    }
+    if (X509_verify_cert(csc) == 1)
+    {
+        Py_INCREF(Py_True);
+        ret = Py_True;
+    }
+    else
+    {
+        cert_error = X509_STORE_CTX_get_error(csc);
+        snprintf(errbuff, VERIFY_BUFF_SIZE - 1,
+                 "error %d at %d depth lookup: %s",
+                 cert_error,
+                 X509_STORE_CTX_get_error_depth(csc),
+                 X509_verify_cert_error_string(cert_error));
+        errbuff[VERIFY_BUFF_SIZE - 1] = 0;
+        PyErr_SetObject(_x509_err, Py_BuildValue("si", errbuff, cert_error));
+    }
+
+    X509_VERIFY_PARAM_free(vpm);
+    X509_STORE_free(cert_ctx);
+    X509_STORE_CTX_free(csc);
+
+    return ret;
+}
+
 /*#defines for i2d and d2i types, which are typed differently
 in openssl-0.9.8 than they are in openssl-0.9.7. This will
 be picked up by the C preprocessor, not the SWIG preprocessor.
